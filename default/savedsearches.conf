[Linux SSH Brute Force Detection]
search = index=linux "Failed password" | rex "Failed password for (invalid user )?(?P<user>\w+) from (?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})" | bin _time span=5m | stats count as failed_count by _time, src_ip, user, host | where failed_count > 5 | rename user as User_Name, _time as Time, host as Host_Name | convert ctime(Time)
alert.track = 1
alert.severity = 3
alert.suppress = 30m
alert_type = scheduled
cron_schedule = */5 * * * *
actions = email, script
action.email.to = dummy_email@example.com
action.email.subject = [ALERT] Linux SSH Brute Force Detected
action.email.format = table
action.script = 1
action.script.filename = slack_alert.py

[Windows Failed Login Brute Force]
search = index=windows source="WinEventLog:Security" EventCode=4625 | rex field=_raw "Source Network Address=(?<src_ip>\S+)" | eval LogonType=coalesce(Logon_Type, LogonType) | where LogonType!=5 AND 'Source_Network_Address'!="-" | bin _time span=5m | stats count as failed_count by _time, user,src_user, src_ip, host | rename user as User_Name, _time as Time, host as Host_Name | where failed_count > 5 | convert ctime(Time)
alert.track = 1
alert.severity = 3
alert.suppress = 30m
alert_type = scheduled
cron_schedule = */5 * * * *
actions = email, script
action.email.to = dummy_email@example.com
action.email.subject = [ALERT] Windows Failed Login Brute Force Detected
action.email.format = table
action.script = 1
action.script.filename = slack_alert.py

[Web Login Brute Force]
search = (index=web OR index=nginx) http_method=POST uri_path="/login" | rex field=_raw "^(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})" | rex field=_raw "\"(?P<user_agent>[^\"]+?)\"$" | bin _time span=1d | stats count as failed_count by _time, src_ip, host, dest_owner, uri_path, http_referrer, user_agent | where failed_count > 20 | rename _time as Time | convert ctime(Time)
alert.track = 1
alert.severity = 3
alert.suppress = 1h
alert_type = scheduled
cron_schedule = 0 * * * *
actions = email, script
action.email.to = dummy_email@example.com
action.email.subject = [ALERT] Web Login Brute Force Detected
action.email.format = table
action.script = 1
action.script.filename = slack_alert.py

[Threat User-Agent Detection]
search = (index=web OR index=nginx) http_method=POST uri_path="/login" | rex field=_raw "^(?P<src_ip>\d{1,3}(?:\.\d{1,3}){3})" | rex field=_raw "\"(?P<user_agent>[^\"]+?)\"$" | eval threat_agent=if(match(lower(user_agent), "curl|sqlmap|python-requests|nmap|wget|nikto|masscan|libwww-perl"), "Yes", "No") | bin _time span=1d | stats count as failed_count by _time, src_ip, host, dest_owner, uri_path, http_referrer, user_agent, threat_agent | where failed_count > 20 AND threat_agent="Yes" | rename _time as Time | convert ctime(Time)
alert.track = 1
alert.severity = 4
alert.suppress = 1h
alert_type = scheduled
cron_schedule = 0 * * * *
actions = email, script
action.email.to = dummy_email@example.com
action.email.subject = [ALERT] Threat User-Agent Detected
action.email.format = table
action.script = 1
action.script.filename = slack_alert.py
